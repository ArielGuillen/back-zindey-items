AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: 
  Test YAML template for the creation of the services that we will use in the project

Parameters:
  MyTableName: 
    Type: String
    Default: MyTableItem
  BusinessTableName: 
    Type: String
    Default: BusinessTable
  BusinessLineTableName: 
    Type: String
    Default: BusinessLineTable
  ImagesBucketName: 
    Type: String
    Default: zindey-bucket-042222
  MyCognitoUserPoolArn:
    Type: String
    Default: arn:aws:cognito-idp:us-east-1:213198851588:userpool/us-east-1_fvuuXTrCB

Globals:
  Function:
      CodeUri: .
      Runtime: nodejs14.x
      MemorySize: 256
      Timeout: 30
      Architectures:
        - x86_64

Resources:

#--------Item Functions --------
  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/item/get_items.lambdaHandler
      Events:
        GetItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /item
            Method: GET
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MyTableName

  PostItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/item/create_item.lambdaHandler
      Events:
        PostItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /item
            Method: POST
            Auth:
               Authorizer: CognitoAuthorizer
            RequestModel:
              Model: ItemModel
              Required: true
              ValidateBody: true
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MyTableName

  PutItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/item/update_item.lambdaHandler
      Events:
        PutItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /item/{id}
            Method: PUT
            Auth:
               Authorizer: CognitoAuthorizer
            RequestModel:
              Model: ItemModel
              Required: true
              ValidateBody: true
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MyTableName

#--------Business Functions --------
  GetBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/business/get_business.lambdaHandler
      Events:
        GetBusinessEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /business
            Method: GET
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BusinessTableName

  PostBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/business/create_business.lambdaHandler
      Events:
        PostBusinessEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /business
            Method: POST
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref BusinessTableName
        - S3FullAccessPolicy:
            BucketName: !Ref ImagesBucketName
  
  PutBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/business/update_business.lambdaHandler
      Events:
        PutBusinessEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /business/{id}
            Method: PUT
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref BusinessTableName
        - S3FullAccessPolicy:
            BucketName: !Ref ImagesBucketName

#--------BusinessLine Functions --------
  GetBusinessLineFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/businessLine/get_businessLine.lambdaHandler
      Events:
        GetBusinessLineEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /businessLine/{lastKey}
            Method: GET
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref BusinessLineTableName

  PostBusinessLineFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/businessLine/create_businessLine.lambdaHandler
      Events:
        PostBusinessLineEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /businessLine
            Method: POST
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref BusinessLineTableName

  PutBusinessLineFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/businessLine/update_businessLine.lambdaHandler
      Events:
        PutBusinessLineEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /businessLine/{id}
            Method: PUT
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref BusinessLineTableName

#--------API REST --------
  MyRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyRestAPI
      StageName: Test
      GatewayResponses:
        UNAUTHORIZED:
          ResponseTemplates:
            "application/json": '{ "message": "Invalid authorization token"}'
        BAD_REQUEST_BODY:
          ResponseTemplates:
            "application/json": '{ "message": "$context.error.validationErrorString"}'
      Auth:
         Authorizers:
           CognitoAuthorizer:
              UserPoolArn: !Ref MyCognitoUserPoolArn
      Models:
        ItemModel:
          $schema: 'http://json-schema.org/draft-04/schema#'
          title: ItemModel
          type: object
          properties:
            name:
              type: string
              minLength: 10
            price:
              type: number
            category:
              type: object
              properties:
                name:
                  type: string
                  minLength: 4
                  maxLength: 32
          required:
            - name
            - category
            - price

#--------DynamoDB Tables --------
  BusinessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref BusinessTableName
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "businessLineId"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
        -
          AttributeName: "businessLineId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  BusinessLineTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref BusinessLineTableName
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  MyTableItem:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref MyTableName
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  ImagesS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ImagesBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  
  ImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImagesS3Bucket
      PolicyDocument:
        Id: BucketPolicy
        Version: 2012-10-17
        Statement:
          - Action: 
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Sid: "BucketPolicy"
            Effect: Allow
            Principal: '*'
            Resource: !Sub arn:aws:s3:::${ImagesS3Bucket}
            Resource: !Sub arn:aws:s3:::${ImagesS3Bucket}/*

Outputs: 
  MyFunction:
    Description: "Create the GetItem Lambda function"
    Value: !GetAtt GetItemFunction.Arn