AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: 
  Test YAML template for the creation of the services that we will use in the project

Parameters:
  MyTableName: 
    Type: String
    Default: MyTableItem
  BusinessTableName: 
    Type: String
    Default: BusinessTable
  MyUserPoolName: 
    Type: String
    Default: UserTest
  MyCognitoUserPoolArn:
    Type: String
    Default: arn:aws:cognito-idp:us-east-1:213198851588:userpool/us-east-1_fvuuXTrCB
    
Resources:

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/item
      Handler: get_items.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        GetItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /item
            Method: get
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTableName

  PostItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/item
      Handler: create_item.lambdaHandler     
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        PostItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /item
            Method: post
            Auth:
               Authorizer: CognitoAuthorizer
            RequestModel:
              Model: TestModel
              Required: true
              ValidateBody: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTableName

  PostBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business/
      Handler: create_business.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        PostBusinessEvent:
          Type: Api
          Properties:
            RestApiId: !Ref MyRestApi
            Path: /business
            Method: post
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTableName


  MyRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyRestAPI
      StageName: Test
      GatewayResponses:
        UNAUTHORIZED:
          ResponseTemplates:
            "application/json": '{ "message": "Invalid authorization token"}'
        BAD_REQUEST_BODY:
          ResponseTemplates:
            "application/json": '{ "message": "$context.error.validationErrorString"}'
      Auth:
         Authorizers:
           CognitoAuthorizer:
              UserPoolArn: !Ref MyCognitoUserPoolArn
      Models:
        TestModel:
          $schema: 'http://json-schema.org/draft-04/schema#'
          title: TestModel
          type: object
          properties:
            name:
              type: string
              minLength: 10
            price:
              type: number
            category:
              type: object
              properties:
                name:
                  type: string
                  minLength: 4
                  maxLength: 32
          required:
            - name
            - category
            - price

  BusinessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref BusinessTableName
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  MyTableItem:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref MyTableName
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
            
Outputs: 
  MyFunction:
    Description: "Create the Lambda function"
    Value: !GetAtt GetItemFunction.Arn
  MyTableItem:
    Description: "Items Table"
    Value: !GetAtt MyTableItem.Arn