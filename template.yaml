AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description:
  Backend Services SAM Template for Zindey suite

Parameters:
  AccountTableName: 
    Type: String
    Default: zindey-suite-account-table
  BusinessTableName: 
    Type: String
    Default: zindey-suite-business-table
  BusinessLineTableName: 
    Type: String
    Default: zindey-suite-business-line-table
  ItemTableName: 
    Type: String
    Default: zindey-suite-item-table
  PaymentTableName: 
    Type: String
    Default: zindey-suite-payment-table
  PolicyTableName: 
    Type: String
    Default: zindey-suite-policy-table
  RoleTableName: 
    Type: String
    Default: zindey-suite-role-table
  WarehouseTableName: 
    Type: String
    Default: zindey-suite-warehouse-table
  S3BucketName: 
    Type: String
    Default: zindey-suite-business-bucket-dev
  UserPoolName: 
    Type: String
    Default: zindey-suite-users

Globals:
  Function:
      Runtime: nodejs14.x
      Timeout: 60
      MemorySize: 256
      #Tracing: Active  #Analyze application performance
      Architectures:
        - x86_64
      Layers:
        - arn:aws:lambda:us-east-1:916649391203:layer:uudi:1

Resources:

#-------- Account Functions --------
  CreateAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/account/
      FunctionName: zindey-suite-create-account
      Handler:  create_account.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref AccountTableName
      Events:
        CreateAccountEvent:
          Type: Api
          Properties:
            RestApiId:  !Ref ZindeyAPIRest
            Path: /account
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName:  !Ref AccountTable

  UpdateAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/account/
      FunctionName: zindey-suite-update-account
      Handler:  update_account.js
      Environment:
        Variables:
          TABLE_NAME: !Ref AccountTableName
      Events:
        UpdateAccountEvent:
          Type: Api
          Properties:
            RestApiId:  !Ref ZindeyAPIRest
            Path: /account
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName:  !Ref AccountTable

#-------- Business Functions -------
  GetBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business/
      FunctionName: zindey-suite-get-business
      Handler:  get_business.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref BusinessTableName
      Events:
        GetBusinessEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /business
            Method: GET
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTable

  CreateBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business/
      FunctionName: zindey-suite-create-business
      Handler: create_business.lambdaHandler
      Layers:
        - arn:aws:lambda:us-east-1:916649391203:layer:jimp:1
      Environment:
        Variables:
          BUSINESS_TABLE_NAME:  !Ref BusinessTableName
          ACCOUNT_TABLE_NAME: !Ref AccountTableName
          BUCKET_NAME:  !Ref S3BucketName
      Events:
        CreateBusinessEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /business
            Method: POST
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTable            
        - DynamoDBCrudPolicy:
            TableName: !Ref AccountTable
        - S3FullAccessPolicy:
            BucketName: !Ref S3Bucket
  
  UpdateBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/business/
      FunctionName: zindey-suite-update-business
      Handler: update_business.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref BusinessTableName
          BUCKET_NAME:  !Ref S3BucketName
      Events:
        UpdateBusinessEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /business/{id}
            Method: PUT
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessTable
        - S3FullAccessPolicy:
            BucketName: !Ref S3Bucket

#------ BusinessLine Functions -----
  GetBusinessLinesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/businessLine/
      FunctionName: zindey-suite-get-business-lines
      Handler: get_businessLines.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref BusinessLineTableName
      Events:
        GetBusinessLinesEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /businessLine
            Method: GET
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessLineTable

  CreateBusinessLineFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/businessLine/
      FunctionName: zindey-suite-create-business-line
      Handler: create_businessLine.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref BusinessLineTableName
      Events:
        CreateBusinessLineEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /businessLine
            Method: POST
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessLineTable

  UpdateBusinessLineFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/businessLine/
      FunctionName: zindey-suite-update-business-line
      Handler: update_businessLine.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref BusinessLineTableName
      Events:
        UpdateBusinessLineEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /businessLine/{id}
            Method: PUT
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BusinessLineTable

#---------- Item Functions ---------
  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: zindey-suite-get-items
      CodeUri: src/item/
      Handler: get_items.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemTableName
      Events:
        GetItemsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /item
            Method: GET
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemTable

  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: zindey-suite-create-items
      CodeUri: src/item/
      Handler: create_item.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemTableName
      Events:
        CreateItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /item
            Method: POST
            Auth:
               Authorizer: CognitoAuthorizer
            RequestModel:
              Model: ItemModel
              Required: true
              ValidateBody: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemTable

  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: zindey-suite-update-items
      CodeUri: src/item/
      Handler: update_item.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemTableName
      Events:
        UpdateItemEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /item/{id}
            Method: PUT
            Auth:
               Authorizer: CognitoAuthorizer
            RequestModel:
              Model: ItemModel
              Required: true
              ValidateBody: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemTable

#-------- Payment Functions --------
  GetPaymentPlansFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/payment/
      FunctionName: zindey-suite-get-payment-plans
      Handler: get_payment_plans.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref PaymentTableName
      Events:
        GetPaymentPlansEvent:
          Type: Api 
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /payment
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName:  !Ref PaymentPlanTable

#-------Role Functions-------
  GetRolesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/role/
      FunctionName: zindey-suite-get-roles
      Handler: get_roles.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref RoleTableName
      Events:
        GetRolesEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /role/{startKey}
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoleTable

  CreateRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/role/
      FunctionName: zindey-suite-create-role
      Handler: create_role.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref RoleTableName
          LAMBDA_NAME:  !Ref ValidateRoleFunction
      Events:
        CreateRoleEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /role
            Method: POST
            RequestModel:
                Model: RoleModel
                Required: true
                ValidateBody: true
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoleTable
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidateRoleFunction
        - Statement:
          - Sid: LambdaInvokePolicy
            Effect: Allow
            Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Resource: '*'

  UpdateRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/role/
      FunctionName: zindey-suite-update-role
      Handler: update_role.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref RoleTableName
          LAMBDA_NAME:  !Ref ValidateRoleFunction
      Events:
        UpdateRoleEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /role
            Method: PUT
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoleTable
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidateRoleFunction
        - Statement:
          - Sid: LambdaInvokePolicy
            Effect: Allow
            Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Resource: '*'
  
  ValidateRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/role/
      FunctionName: zindey-suite-validate-role
      Handler: validate_role.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref RoleTableName
      Events:
        ValidateRoleEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /role/validate
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref RoleTable

#------- Policy Functions-------
  GetPoliciesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/policy/
      FunctionName: zindey-suite-get-policies
      Handler: get_policies.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref PolicyTableName
      Events:
        GetPoliciesEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /policy/{startKey}
            Method: GET
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PolicyTable

  CreatePolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/policy/
      FunctionName: zindey-suite-create-policy
      Handler: create_policy.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref PolicyTableName
          LAMBDA_NAME:  !Ref ValidatePolicyFunction
      Events:
        CreatePolicyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /policy
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PolicyTable
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidatePolicyFunction
        - Statement:
          - Sid: LambdaInvokePolicy
            Effect: Allow
            Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Resource: '*'

  UpdatePolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/policy/
      FunctionName: zindey-suite-update-policy
      Handler: update_policy.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref PolicyTableName
          LAMBDA_NAME:  !Ref ValidatePolicyFunction
      Events:
        UpdatePolicyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /policy
            Method: PUT
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PolicyTable
        - LambdaInvokePolicy:
            FunctionName: !Ref ValidatePolicyFunction
        - Statement:
          - Sid: LambdaInvokePolicy
            Effect: Allow
            Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Resource: '*'

  ValidatePolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/policy/
      FunctionName: zindey-suite-validate-policy
      Handler: validate_policy.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref PolicyTableName
      Events:
        ValidatePolicyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /policy/validate
            Method: POST
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PolicyTable

#--------Warehouse Functions --------

  GetWarehousesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: zindey-suite-get-warehouses
      CodeUri: src/warehouse/
      Handler: get_warehouses.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref WarehouseTableName
      Events:
        GetWarehousesEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /warehouse
            Method: GET
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WarehouseTable

  CreateWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: zindey-suite-create-warehouse
      CodeUri: src/warehouse/
      Handler: create_warehouse.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref WarehouseTableName
      Events:
        CreateWarehouseEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /warehouse
            Method: POST
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WarehouseTable

  UpdateWarehouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: zindey-suite-update-warehouse
      CodeUri: src/warehouse/
      Handler: update_warehouse.lambdaHandler
      Environment:
        Variables:
          TABLE_NAME: !Ref WarehouseTableName
      Events:
        UpdateWarehouseEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ZindeyAPIRest
            Path: /warehouse/{id}
            Method: PUT
            Auth:
               Authorizer: CognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WarehouseTable

#--------- Dynamo DB Tables --------
  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref AccountTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType:  S
        - AttributeName: businessId
          AttributeType:  S
      KeySchema:
        - AttributeName: id
          KeyType:  HASH
      ProvisionedThroughput:
        ReadCapacityUnits:  5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: GSIFindByBusinessId
          KeySchema:
            - AttributeName: businessId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:  
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  
  BusinessTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref BusinessTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  BusinessLineTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref BusinessLineTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref ItemTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  PaymentPlanTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref PaymentTableName
      AttributeDefinitions:
        - AttributeName: name
          AttributeType:  S
      KeySchema:
        - AttributeName: name
          KeyType:  HASH
      ProvisionedThroughput:
        ReadCapacityUnits:  5
        WriteCapacityUnits: 5

  RoleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref RoleTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:      
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: GSIFindByName
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:  
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  PolicyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref PolicyTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:      
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: GSIFindByName
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:  
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  
  WarehouseTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref WarehouseTableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
        
#------------ S3 Bucket ------------
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  
  ImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Id: BucketPolicy
        Version: 2012-10-17
        Statement:
          - Action: 
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Sid: "s3BucketPolicy"
            Effect: Allow
            Principal: '*'
            Resource: !Sub arn:aws:s3:::${S3Bucket}
            Resource: !Sub arn:aws:s3:::${S3Bucket}/*

#-------- Cognito Userpool ---------

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Mutable: true
          Required: true          
          StringAttributeConstraints: 
            MaxLength: 320
            MinLength: 10
        - AttributeDataType: String
          DeveloperOnlyAttribute: true
          Name: paymentPlan
          Mutable: true
          Required: false
          StringAttributeConstraints: 
            MaxLength: 40
            MinLength: 10

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: zindey-suite
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref UserPoolName
      SupportedIdentityProviders: 
        - COGNITO
      CallbackURLs: 
        - https://www.zindey.com
      LogoutURLs: 
        - https://www.zindey.com
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: 
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid 
      GenerateSecret: false
      RefreshTokenValidity: 1
      AccessTokenValidity: 60
      IdTokenValidity: 1
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: days
        RefreshToken: days

#------------ API REST -------------
  ZindeyAPIRest:
    Type: AWS::Serverless::Api
    Properties:
      Name: zindey-suite-api
      StageName:  dev
      MethodSettings: #Enable CloudWatch logs
        - LoggingLevel: ERROR
          ResourcePath: '/*'  # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
      GatewayResponses:
        UNAUTHORIZED:
          ResponseTemplates:
            "application/json": '{  "message":  "Invalid Authorization Token" }'
        BAD_REQUEST_BODY:
          ResponseTemplates:
            "application/json": '{  "message":  "$context.error.validationErrorString" }'
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
      Models:
        ItemModel:
          $schema: 'http://json-schema.org/draft-04/schema#'
          title: ItemModel
          type: object
          properties:
            name:
              type: string
              minLength: 10
            price:
              type: number
            category:
              type: object
              properties:
                name:
                  type: string
                  minLength: 4
                  maxLength: 32
          required:
            - name
            - category
            - price
        RoleModel:
          $schema: 'http://json-schema.org/draft-04/schema#'
          title: RoleModel
          type: object
          required:
            - name
            - policies
          properties:
            name:
              type: string
              minLength: 10
            policies:
              type: array
              items:
                type: object
                required:
                  - service
                  - resources
                properties:
                  service:
                    type: string
                  resources:
                    type: array
                    items:
                      type: object
                      properties:
                        name: 
                          type: string
                        actions:
                          type: array
                          items:
                            type: string
  #------------ Validation Models -------------
  # RoleModel:
  #   Type: AWS::ApiGateway::Model
  #   Properties: 
  #     ContentType: application/json
  #     Description: Validation Model to Role functions
  #     Name: RoleModel
  #     RestApiId: !Ref ZindeyAPIRest
  #     Schema: 

  #------------ API Configure -------------
  ApiAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
  
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

Outputs:
  HelloWorldApi:
    Description: "API Gateway endpoint URL for dev stage"
    Value: !Sub 'https://${ZindeyAPIRest}.execute-api.${AWS::Region}.amazonaws.com/dev'